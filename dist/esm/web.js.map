{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAwB,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAIlE,MAAM,YAAY,GAAG,IAAI,GAAG,EAAyB,CAAC;AAEtD,MAAM,OAAO,YAAa,SAAQ,SAAS;IAEzC,WAAW;QACT,aAAa;QACd,UAAU,CAAC,EAAE,GAAG,IAAI,CAAA;IACrB,CAAC;IAED,aAAa;IACb,WAAW,CAAC,SAAc,EAAE,YAAiB;;QAC3C,MAAM,CAAC,SAAG,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,mCAAI,IAAI,GAAG,EAAE,CAAA;QAElD,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;QAEnB,YAAY,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,CAAA;QAE9B,OAAO;YACL,MAAM,EAAE,KAAK,IAAI,EAAE;gBACjB,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAA;YACxB,CAAC;SACF,CAAA;IACH,CAAC;IAES,eAAe,CAAC,SAAiB,EAAE,IAAS;;QACpD,MAAM,CAAC,SAAG,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,mCAAI,IAAI,GAAG,EAAE,CAAA;QAElD,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAA;IACzC,CAAC;IAED,IAAI,CAAC,IAAkC;QACrC,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,gBAClC,SAAS,EAAE,OAAO,EAClB,QAAQ,EAAE,eAAe,EACzB,MAAM,EAAE,SAAS,IACd,IAAI,CACe,CAAC,CAAA;IAC3B,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,QAA2B;QAC7C,OAAO,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAEnC,IAAI,CAAC,WAAW,EAAE,CAAA;IACpB,CAAC;IAED,KAAK;QACH,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC5B,CAAC;CACF","sourcesContent":["import { PluginListenerHandle, WebPlugin } from '@capacitor/core';\nimport { DataWedgePlugin, DataWedgeScanResult } from './definitions';\n\n\nconst listenersMap = new Map<string, Set<Function>>();\n\nexport class DataWedgeWeb extends WebPlugin implements DataWedgePlugin {\n\n  initVirtual() {\n    // @ts-ignore\n   globalThis.dw = this\n  }\n\n  // @ts-ignore\n  addListener(eventName: any, listenerFunc: any): PluginListenerHandle {        \n    const l = listenersMap.get(eventName) ?? new Set()\n\n    l.add(listenerFunc)\n\n    listenersMap.set(eventName, l)\n    \n    return {\n      remove: async () => {\n        l.delete(listenerFunc)\n      }\n    }\n  }\n\n  protected notifyListeners(eventName: string, data: any): void {\n    const l = listenersMap.get(eventName) ?? new Set()    \n    \n    l.forEach((listener) => listener(data))\n  }\n\n  scan(data: Partial<DataWedgeScanResult>) {\n    this.notifyListeners('scan_result', {\n      labelType: 'EAN13',\n      scanData: '1234567890128',\n      source: 'scanner',\n      ...data\n    } as DataWedgeScanResult)\n  }\n\n  async createProfile(_options: { name: string; }): Promise<any> {\n    console.debug('DW: createProfile');\n\n    this.initVirtual()\n  }\n\n  alert(): void {\n    console.warn('DW: alert');\n  }\n}\n"]}